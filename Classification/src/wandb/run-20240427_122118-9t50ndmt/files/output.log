
  0%|          | 0/10 [00:20<?, ?it/s]
Traceback (most recent call last):
  File "E:\Codes\Projects\Introduction-to-Artificial-Intelligence\Classification\src\main.py", line 155, in <module>
    train_loss, train_acc, train_f_score = train(train_dataloader)
                                           ^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Codes\Projects\Introduction-to-Artificial-Intelligence\Classification\src\main.py", line 135, in train
    return eval_model(dataloader, is_training=True)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Codes\Projects\Introduction-to-Artificial-Intelligence\Classification\src\main.py", line 109, in eval_model
    output = model(x)
             ^^^^^^^^
  File "D:\ProgramFiles\Python\Python312\Lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\ProgramFiles\Python\Python312\Lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "E:\Codes\Projects\Introduction-to-Artificial-Intelligence\Classification\src\models.py", line 172, in forward
    embedded = self.embedding(input_ids)
               ^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\ProgramFiles\Python\Python312\Lib\site-packages\torch\nn\modules\module.py", line 1532, in _wrapped_call_impl
    return self._call_impl(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\ProgramFiles\Python\Python312\Lib\site-packages\torch\nn\modules\module.py", line 1541, in _call_impl
    return forward_call(*args, **kwargs)
           ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  File "D:\ProgramFiles\Python\Python312\Lib\site-packages\transformers\models\bert\modeling_bert.py", line 201, in forward
    buffered_token_type_ids_expanded = buffered_token_type_ids.expand(input_shape[0], seq_length)
                                       ^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
RuntimeError: The expanded size of the tensor (120) must match the existing size (50) at non-singleton dimension 1.  Target sizes: [50, 120].  Tensor sizes: [1, 50]